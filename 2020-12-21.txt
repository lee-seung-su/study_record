HSV
-hue(색상), saturation(채도), value(명도)
hue : 0 ~ 180 (빨주노초파남보~)
saturation : 0 ~ 255 ( 높을수록 원색, 낮을수록 흰색)
value : 0  ~ 255 (높을수록 흰색, 낮을수록 검은색)
뒤집어놓은 원뿔로 생각하면된다. hue는 원(내부)둘레라고 생각하면 된다
saturation은 밑면 중심에서 외부로 향하는 방향의 반지름? 생각하면되고. value는 꼭지점에서 밑면까지 위로 향하는 방향
참고 : https://bskyvision.com/46

uart : 메모리에 있는 병렬데이터를 직렬로 한번에 전송하는 protocol(병렬: 여러개의 핀으로 1개씩 동시에 전달, 직렬 : 1개의 핀으로 여러데이터 전달)
주로 8bit단위이며 시작 끝(1, 0)비트로 데이터의 시작을 판단 -> 주로 10bit단위(parity check없을때)

api : 함수를 가져다쓰게 해놓은것 ( 임의 수정 불가)
라이브러리 : 이러한 함수들을 모아놓은 패키지 (여전히 수정불가 + api포함하는 개념)

*헤더 : 알아먹을수 있는 언어 / 라이브러리 : 헤더가 컴파일을 거친것으로 기계어

정적라이브러리(.lib) - 한번 컴파일된 헤더파일로 기계어다. -> 컴파일시간 단축가능
링크할때 목적파일과 같이 링크되어 exe파일에 포함된다 -> 실행파일의 크기 커진다는 단점

pch(미리컴파일된헤더) - 작업이 많은 헤더파일을 마찬가지로 컴파일시간을 단축하기위해 헤더를 미리 컴파일해둔것 ex)stdafx.h -> 여러 stdlib, stdio ~ 등의 라이브러리를 미리 pch화 시킨 헤더
.pch의 확장자를 가진다.
-이 헤더가 필요로하는 소스코드마다 추가 필요 + 헤더파일 수정 시 매번 변경이 필요하다

동적라이브러리(.dll) - 런타임시 헤더가 메모리에 로드된다.
-exe파일과 독립되므로 실행파일의 크기가 작다 + 라이브러리만 update하고 load하면되므로 update적용 쉽다
- 아무래도 라이브러리가 위치한것으로 링크되므로 링크 오버헤드가 발생한다

C-ITS : cooperative intelligent transportation system : 지능형 교통시스템?
기존에는 관제탑? 이런게 있어서 여기로 모든정보를 전송 + 각 운송장비들은 센서의 기능만했다 ( one way 통신방식)
+ 특정위치에서만 관제탑으로부터 데이터를 받아서 실시간 반영이 어려웠다 - 지연발생하므로
C-ITS : 관제탑 뿐만아니라 운송장비들도 서로 통신하여 서로 상호간에 신호를 주고받는 시스템 ( 양방향(two way) 통신방식)